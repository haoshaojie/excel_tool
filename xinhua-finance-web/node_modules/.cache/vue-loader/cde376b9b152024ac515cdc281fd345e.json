{"remainingRequest":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\src\\views\\contract\\contract\\components\\userAgreementInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\src\\views\\contract\\contract\\components\\userAgreementInfo.vue","mtime":1618812791209},{"path":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport {getList, getDetail} from \"@/api/contract/contract/useragreement\";\nimport userProtocolFilePerview from \"../userProtocolFilePerview\";\n\nexport default {\n    name:\"user-agreement-info\",\n    components: {userProtocolFilePerview},\n    props:['userAgreementInfo'],\n    mounted: function(){\n        this.userAgreement.itemValues= this.userAgreementInfo;\n    },\n    data(){\n        return{\n            showAgreement:false,\n            userAgreement:{\n                itemValues:[]\n            },\n            protocolFileList: [],\n            selectionList: [],\n            temSelectionList:[],\n            query:{},\n            page: {\n                currentPage: 1,\n                total: 0,\n                pageSizes: [10, 20, 30, 40, 50, 100],\n                pageSize: 10\n              },\n            loading: false,\n            openDialog: false,\n            option:{\n                calcHeight: 210,\n                searchMenuSpan:6,\n                searchShow: true,\n                tip: false,\n                border: true,\n                index: false,\n                viewBtn:false,\n                addBtn:false,\n                editBtn:false,\n                delBtn:true,\n                menu:false,\n                header:false,\n                selection: true,\n                column:[\n                    {\n                      label: \"主键id 雪花算法产生\",\n                      prop: \"id\",\n                      hide: true,\n                      display: false, //在查看，新增，编辑页面是否显示\n                    },\n                    {\n                        label:\"协议编码\",\n                        prop:\"agreementNo\",\n                        search:true\n                    },\n                     {\n                        label:\"协议名称\",\n                        prop:\"agreementName\"\n                    },\n                     {\n                        label:\"协议类型\",\n                        prop:\"agreementType\",\n                        type:\"select\",\n                        dicUrl: this.getDicValue(this.CONSTANT.AGREEMENT_TYPE),\n                        props: {\n                          label: \"dictValue\",\n                          value: \"dictKey\"\n                        },\n                        search:true\n                    },\n                     {\n                        label:\"协议附件\",\n                        prop:\"agreementFile\",\n                        slot:true\n                    }\n                ]\n            },\n            data:[]\n        }\n    },\n    methods:{\n         back(){\n            this.$emit(\"update\",2);\n        },\n        save(){\n          this.$emit(\"saveUserAgreementInfo\",this.userAgreement.itemValues);\n        },\n        next(){\n            this.$emit(\"update\",4);\n        },\n        sure(){\n            this.userAgreement.itemValues=[];\n            this.showAgreement=false;\n            this.saveSelectList(this.temSelectionList);\n            this.selectionList.forEach(item=>{\n                this.userAgreement.itemValues.push(item);\n            });\n        },\n        showAssociation() {\n          this.showAgreement=true;\n          this.temSelectionList = [];\n          this.refreshChange();\n        },\n        checkRemove(selection, row) {\n          // 判断是否取消选中\n          let hasRemoveFlag = true;\n          for(var i = 0; i < selection.length; i++) {\n            if(selection[i].id == row.id) {\n              hasRemoveFlag = false;\n              break;\n            }\n          }\n          return hasRemoveFlag;\n        },\n        saveSelectList(selection){\n          // 如果当前选项为空，并且表格有选择数据\n          if(this.selectionList.length <= 0) {\n            this.selectionList = selection;\n            return ;\n          }\n          // 合并处理数组集合\n          let swapObj = {};\n          this.selectionList.forEach(function(value,index){\n            swapObj[value.id] = value;\n          });\n          selection.forEach(function(value,index){\n            swapObj[value.id] = value;\n          });\n          this.selectionList = [];\n          for(let id in swapObj) {\n            this.selectionList.push(swapObj[id]);\n          }\n        },\n        selectAll(selection){\n          for(let i = 0; i < selection.length; i++) {\n            this.select(selection, selection[i]);\n          }\n        },\n        select(selection, row){ // 解决记忆选项\n          // 判断是否取消选中\n          let hasRemoveFlag = this.checkRemove(selection, row);\n          // 取消选中更新临时存储对象\n          if(hasRemoveFlag) {\n            let idx = -1;\n            this.temSelectionList.forEach(function(value,index){\n              if(value.id == row.id) {\n                idx = index;\n              }\n            });\n            this.temSelectionList = this.temSelectionList.slice(0,idx).concat(this.temSelectionList.splice(idx+1,this.temSelectionList.length));\n          } else {\n            // 否则 追加进入临时对象， 并且防止重复追加\n            let isRepeat = false;\n            for(let i = 0; i < this.temSelectionList.length; i++) {\n              if(this.temSelectionList[i].id == row.id) {\n                isRepeat = true;\n                break;\n              }\n            }\n            if(!isRepeat) {\n              this.temSelectionList.push(row);\n            }\n          }\n        },\n        deleteItem(item,index){\n            this.userAgreement.itemValues.splice(index,1);\n            this.selectionClear(item,index);\n        },\n        selectionClear(item,index) {\n            this.selectionList.splice(index,1);\n        },\n        /**表格按钮事件**/\n        viewAgreementDocument(row) {\n          event.stopPropagation();\n          getDetail(row.id).then(res => {\n            this.protocolFileList = res.data.data.protocolFile;\n            this.openDialog = true;\n          })\n        },\n        closeDialog(val) {\n          this.openDialog = val;\n        },\n        /**检索相关事件**/\n        searchChange(params,done) {\n          this.query = params;\n          this.page.currentPage = 1;\n          this.onLoad(this.page, params);\n          event.stopPropagation();\n          done();\n        },\n        /**表格分页相关事件**/\n        currentChange(currentPage) {\n          this.page.currentPage = currentPage;\n        },\n        sizeChange(pageSize) {\n          this.page.pageSize = pageSize;\n        },\n        refreshChange() {\n          this.onLoad(this.page, this.query);\n        },\n        onLoad(page, params = {}) {\n          this.loading = true;\n\n          getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(res => {\n            const data = res.data.data;\n            this.page.total = data.total;\n            this.data = data.records;\n            this.loading = false;\n          });\n      }\n    }\n}\n",{"version":3,"sources":["userAgreementInfo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"userAgreementInfo.vue","sourceRoot":"src/views/contract/contract/components","sourcesContent":["<!--创建合约的用户信息信息-->\n<template>\n    <basic-container>\n         <el-button \n            type=\"primary\" \n            size=\"small\"\n            @click=\"showAssociation\">\n            关联用户协议\n        </el-button>\n        <div class=\"el-agreement-form\">\n            <el-form :inline=\"true\"  size=\"small\" label-position=\"left\" :model=\"userAgreement\">\n                <el-form-item v-for=\"(item,index) in userAgreement.itemValues\" :key=\"index\" :label=\"`用户协议${index+1}`\">\n                    <el-input :placeholder=\"`用户协议${index+1}`\" v-model=\"item.agreementName\" readonly=\"true\"></el-input>\n                    <el-button  icon=\"el-icon-delete\" circle @click=\"deleteItem(item,index)\"></el-button>\n                </el-form-item>\n            </el-form>\n        </div>\n         <div class=\"el-step-footer\">\n            <el-button type=\"primary\" size=\"small\" plain @click=\"back\">上一步</el-button>\n            <el-button type=\"primary\" size=\"small\" @click=\"save\">保&nbsp;&nbsp;&nbsp;存</el-button>\n            <el-button type=\"primary\" size=\"small\" plain @click=\"next\">下一步</el-button>\n        </div>\n        <!-- 关联用户协议 -->\n        <el-dialog \n        title=\"用户协议\"\n        width=\"60%\"\n        :visible.sync=\"showAgreement\"\n        center>\n            <avue-crud  \n            ref=\"crud\"\n            v-model=\"form\"\n            :option=\"option\"\n            :data=\"data\"\n            :page.sync=\"page\"\n            :table-loading=\"loading\"\n            @size-change=\"sizeChange\"\n            @current-change=\"currentChange\"\n            @refresh-change=\"refreshChange\"\n            @search-change=\"searchChange\"\n            @on-load=\"onLoad\"\n            @select=\"select\"\n            @select-all=\"selectAll\"\n            >\n            <template slot=\"agreementFile\" slot-scope=\"scope\">\n               <span v-if=\"scope.row.protocolFile !== undefined && scope.row.protocolFile.length >0 \">\n                  <el-button type=\"text\"\n                             size=\"small\"\n                             @click.stop=\"viewAgreementDocument(scope.row)\">查看附件\n                  </el-button>\n                </span>\n            </template>\n            </avue-crud>\n            <userProtocolFilePerview :openDialog=\"openDialog\" :protocolFileList=\"protocolFileList\"\n                                   @close=\"closeDialog\"></userProtocolFilePerview>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button type=\"primary\" @click=\"sure\" size=\"small\">确 认</el-button>\n                <el-button  @click=\"showAgreement=false\" size=\"small\">取 消</el-button>\n            </div>\n        </el-dialog>\n    </basic-container>\n</template>\n<script>\n\nimport {getList, getDetail} from \"@/api/contract/contract/useragreement\";\nimport userProtocolFilePerview from \"../userProtocolFilePerview\";\n\nexport default {\n    name:\"user-agreement-info\",\n    components: {userProtocolFilePerview},\n    props:['userAgreementInfo'],\n    mounted: function(){\n        this.userAgreement.itemValues= this.userAgreementInfo;\n    },\n    data(){\n        return{\n            showAgreement:false,\n            userAgreement:{\n                itemValues:[]\n            },\n            protocolFileList: [],\n            selectionList: [],\n            temSelectionList:[],\n            query:{},\n            page: {\n                currentPage: 1,\n                total: 0,\n                pageSizes: [10, 20, 30, 40, 50, 100],\n                pageSize: 10\n              },\n            loading: false,\n            openDialog: false,\n            option:{\n                calcHeight: 210,\n                searchMenuSpan:6,\n                searchShow: true,\n                tip: false,\n                border: true,\n                index: false,\n                viewBtn:false,\n                addBtn:false,\n                editBtn:false,\n                delBtn:true,\n                menu:false,\n                header:false,\n                selection: true,\n                column:[\n                    {\n                      label: \"主键id 雪花算法产生\",\n                      prop: \"id\",\n                      hide: true,\n                      display: false, //在查看，新增，编辑页面是否显示\n                    },\n                    {\n                        label:\"协议编码\",\n                        prop:\"agreementNo\",\n                        search:true\n                    },\n                     {\n                        label:\"协议名称\",\n                        prop:\"agreementName\"\n                    },\n                     {\n                        label:\"协议类型\",\n                        prop:\"agreementType\",\n                        type:\"select\",\n                        dicUrl: this.getDicValue(this.CONSTANT.AGREEMENT_TYPE),\n                        props: {\n                          label: \"dictValue\",\n                          value: \"dictKey\"\n                        },\n                        search:true\n                    },\n                     {\n                        label:\"协议附件\",\n                        prop:\"agreementFile\",\n                        slot:true\n                    }\n                ]\n            },\n            data:[]\n        }\n    },\n    methods:{\n         back(){\n            this.$emit(\"update\",2);\n        },\n        save(){\n          this.$emit(\"saveUserAgreementInfo\",this.userAgreement.itemValues);\n        },\n        next(){\n            this.$emit(\"update\",4);\n        },\n        sure(){\n            this.userAgreement.itemValues=[];\n            this.showAgreement=false;\n            this.saveSelectList(this.temSelectionList);\n            this.selectionList.forEach(item=>{\n                this.userAgreement.itemValues.push(item);\n            });\n        },\n        showAssociation() {\n          this.showAgreement=true;\n          this.temSelectionList = [];\n          this.refreshChange();\n        },\n        checkRemove(selection, row) {\n          // 判断是否取消选中\n          let hasRemoveFlag = true;\n          for(var i = 0; i < selection.length; i++) {\n            if(selection[i].id == row.id) {\n              hasRemoveFlag = false;\n              break;\n            }\n          }\n          return hasRemoveFlag;\n        },\n        saveSelectList(selection){\n          // 如果当前选项为空，并且表格有选择数据\n          if(this.selectionList.length <= 0) {\n            this.selectionList = selection;\n            return ;\n          }\n          // 合并处理数组集合\n          let swapObj = {};\n          this.selectionList.forEach(function(value,index){\n            swapObj[value.id] = value;\n          });\n          selection.forEach(function(value,index){\n            swapObj[value.id] = value;\n          });\n          this.selectionList = [];\n          for(let id in swapObj) {\n            this.selectionList.push(swapObj[id]);\n          }\n        },\n        selectAll(selection){\n          for(let i = 0; i < selection.length; i++) {\n            this.select(selection, selection[i]);\n          }\n        },\n        select(selection, row){ // 解决记忆选项\n          // 判断是否取消选中\n          let hasRemoveFlag = this.checkRemove(selection, row);\n          // 取消选中更新临时存储对象\n          if(hasRemoveFlag) {\n            let idx = -1;\n            this.temSelectionList.forEach(function(value,index){\n              if(value.id == row.id) {\n                idx = index;\n              }\n            });\n            this.temSelectionList = this.temSelectionList.slice(0,idx).concat(this.temSelectionList.splice(idx+1,this.temSelectionList.length));\n          } else {\n            // 否则 追加进入临时对象， 并且防止重复追加\n            let isRepeat = false;\n            for(let i = 0; i < this.temSelectionList.length; i++) {\n              if(this.temSelectionList[i].id == row.id) {\n                isRepeat = true;\n                break;\n              }\n            }\n            if(!isRepeat) {\n              this.temSelectionList.push(row);\n            }\n          }\n        },\n        deleteItem(item,index){\n            this.userAgreement.itemValues.splice(index,1);\n            this.selectionClear(item,index);\n        },\n        selectionClear(item,index) {\n            this.selectionList.splice(index,1);\n        },\n        /**表格按钮事件**/\n        viewAgreementDocument(row) {\n          event.stopPropagation();\n          getDetail(row.id).then(res => {\n            this.protocolFileList = res.data.data.protocolFile;\n            this.openDialog = true;\n          })\n        },\n        closeDialog(val) {\n          this.openDialog = val;\n        },\n        /**检索相关事件**/\n        searchChange(params,done) {\n          this.query = params;\n          this.page.currentPage = 1;\n          this.onLoad(this.page, params);\n          event.stopPropagation();\n          done();\n        },\n        /**表格分页相关事件**/\n        currentChange(currentPage) {\n          this.page.currentPage = currentPage;\n        },\n        sizeChange(pageSize) {\n          this.page.pageSize = pageSize;\n        },\n        refreshChange() {\n          this.onLoad(this.page, this.query);\n        },\n        onLoad(page, params = {}) {\n          this.loading = true;\n\n          getList(page.currentPage, page.pageSize, Object.assign(params, this.query)).then(res => {\n            const data = res.data.data;\n            this.page.total = data.total;\n            this.data = data.records;\n            this.loading = false;\n          });\n      }\n    }\n}\n</script>\n<style lang=\"scss\">\n.el-agreement-form{\n    margin-top: 1rem;\n    .el-form--inline .el-form-item{\n        width: 100%;\n        display: flex;\n        .el-form-item__content{\n            width: calc( 100% - 300px );\n            display: flex;\n        }\n        .el-button{\n            margin-left: 10px;\n        }\n    }\n}\n</style>\n"]}]}