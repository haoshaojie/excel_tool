{"remainingRequest":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\src\\views\\contract\\customer\\addOrgCustomerDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\src\\views\\contract\\customer\\addOrgCustomerDialog.vue","mtime":1618367977438},{"path":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport baseInfo from \"./eltabs/baseInfo\"\nimport {queryALl, add} from \"@/api/contract/customer/orgcustomer\";\nimport {getLazyTree} from \"@/api/base/region\";\nimport {getDeptTree} from \"@/api/system/dept\";\n\nexport default {\n  components: {\n    baseInfo,\n  },\n  mounted(){\n    // 初始化部门数据\n    getDeptTree('000000').then(res => {\n      console.log(this.option)\n      console.log(this.option.column.contactPerson)\n      const column = this.findObject(this.option.column.contactPerson, \"custOrg\");\n      console.log(column)\n      column.dicData = res.data.data;\n    });\n  },\n  name: \"add-org-customer-dialog\",\n  props: {\n    addOrEditDialog: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    cancelDialog() {\n      this.$emit('cancel');\n    },\n  },\n  data() {\n    return {\n      title: \"编辑\",\n      superUnitDialog: false,\n      obj: {\n        dynamic: [{\n          input: 1,\n          select: 1,\n          radio: 1,\n        }, {\n          input: 2,\n          select: 2,\n          radio: 1,\n        }]\n      },\n      form: {\n        title: '客户基本信息',\n      },\n      option: {\n        submitText: '完成',\n        column: [{\n          label: \"\",\n          labelWidth: 50,\n          type: 'title',\n          prop: \"title\",\n          span: 24,\n          styles: {\n            fontSize: '24px'\n          }\n        },\n          {\n            label: '客户名称',\n            suffixIcon: 'el-icon-tickets',\n            prop: 'custName',\n            span: 8,\n            rules: [{\n              required: true,\n              message: \"请输入客户名称\",\n              trigger: \"blur\"\n            }]\n          },\n          {\n            label: \"客户类型\",\n            prop: \"custType\",\n            type: \"select\",\n            rules: [{\n              required: true,\n              message: \"请输入客户名称\",\n              trigger: \"blur\"\n            }],\n            dicUrl: this.getDicValue(this.CONSTANT.CUST_TYPE),\n            props: {\n              label: \"dictValue\",\n              value: \"dictKey\"\n            },\n            span: 8,\n            row: true\n          },\n          {\n            label: \"上级单位\",\n            prop: \"superUnit\",\n            click: ({value, column}) => {\n              this.$message.success('查看控制台')\n              console.log('点击事件', value, column)\n              this.superUnitDialog = true;\n            },\n            dicData: [{\n              label: '真',\n              value: 'true'\n            }, {\n              label: '假',\n              value: 'false'\n            }],\n            span: 8,\n          },\n          {\n            label: \"所属行业\",\n            prop: \"custIndustrys\",\n            type: \"cascader\",\n            checkStrictly: true,\n            props: {\n              label: 'name',\n              value: 'code'\n            },\n            lazy: true,\n            lazyLoad(node, resolve) {\n              console.log(node.value)\n              let stop_level = 2;\n              let level = node.level;\n              let data = node.data || {}\n              let code = data.code;\n              let list = [];\n              let callback = () => {\n                resolve((list || []).map(ele => {\n                  return Object.assign(ele, {\n                    leaf: level >= stop_level\n                  })\n                }));\n              }\n              if (level == 0) {\n                queryALl().then(res => {\n                  list = res.data.data;\n                  callback()\n                })\n              } else {\n\n                queryALl(node.value).then(res => {\n                  list = res.data.data;\n                  callback()\n                })\n              }\n            },\n            span: 8,\n            row: true\n          },\n          {\n            label: \"所属地域\",\n            prop: \"region\",\n            type: 'tree',\n            span: 8,\n            leafOnly: true,\n            viewDisplay: false,\n            props: {\n              label: 'title',\n              value: 'value'\n            },\n            lazy: true,\n            treeLoad: function (node, resolve) {\n              const parentCode = (node.level === 0) ? \"00\" : node.data.id;\n              getLazyTree(parentCode).then(res => {\n                resolve(res.data.data.map(item => {\n                  return {\n                    ...item,\n                    leaf: !item.hasChildren\n                  }\n                }))\n              });\n            },\n            rules: []\n          },\n          {\n            label: '详细地址',\n            prop: 'custAddress',\n            span: 8,\n            row: true\n          },\n          {\n            label: '邮政编码',\n            prop: 'postcode',\n            span: 8,\n          },\n          {\n            label: '公司电话',\n            prop: 'comPhone',\n            span: 8,\n            row: true\n          },\n          {\n            label: '公司传真',\n            prop: 'comFax',\n            span: 8,\n          },\n          {\n            label: '公司网址',\n            prop: 'comWebsite',\n            span: 8,\n            row: true\n          },\n          {\n            label: \"客户状态\",\n            prop: \"custState\",\n            type: \"select\",\n            dicUrl: this.getDicValue(this.CONSTANT.CUST_STATE),\n            props: {\n              label: \"dictValue\",\n              value: \"dictKey\"\n            },\n            span: 8,\n          },\n          {\n            label: \"业务机会状态\",\n            prop: \"businessChance\",\n            type: \"select\",\n            dicUrl: this.getDicValue(this.CONSTANT.BUSINESS_CHANCE),\n            props: {\n              label: \"dictValue\",\n              value: \"dictKey\"\n            },\n            span: 8,\n            row: true\n          },\n          {\n            label: '业务描述',\n            prop: 'businessDesc',\n            type: 'textarea',\n            minRows: 10,\n            maxlength: 200,\n            span: 16,\n            showWordLimit: true\n          },\n          {\n            label: '客户管理活动',\n            prop: 'orgActivities',\n            type: 'dynamic',\n            span: 16,\n            children: {\n              align: 'center',\n              headerAlign: 'center',\n              rowAdd: (done) => {\n                this.$message.success('新增回调');\n                done({\n                  input: '默认值'\n                });\n              },\n              rowDel: (row, done) => {\n                this.$message.success('删除回调' + JSON.stringify(row));\n                done();\n              },\n              column: [{\n                label: \"活动类型\",\n                prop: \"activityType\",\n                type: \"select\",\n                // rules: [{\n                //   required: true,\n                //   message: \"请输入客户名称\",\n                //   trigger: \"blur\"\n                // }],\n                dicUrl: this.getDicValue(this.CONSTANT.ACTIVITY_TYPE),\n                props: {\n                  label: \"dictValue\",\n                  value: \"dictKey\"\n                },\n                span: 8,\n              }, {\n                label: \"用户名\",\n                prop: \"activityContent\",\n                // rules: [{\n                //   required: true,\n                //   message: \"请输入用户名\",\n                //   trigger: \"blur\"\n                // }]\n              }]\n            }\n          },\n          {\n            label: '联系人信息',\n            prop: 'orgContacts',\n            type: 'dynamic',\n            span: 16,\n            children: {\n              align: 'center',\n              headerAlign: 'center',\n              rowAdd: (done) => {\n                this.$message.success('新增回调');\n                done({\n                  input: '默认值'\n                });\n              },\n              rowDel: (row, done) => {\n                this.$message.success('删除回调' + JSON.stringify(row));\n                done();\n              },\n              column: [{\n                // width: 200,\n                label: '联系人名称',\n                prop: \"contactPerson\",\n              },\n                {\n                  // width: 200,\n                  label: '联系人类型',\n                  prop: \"contactType\",\n                }, {\n                  // width: 200,\n                  label: '联系方式',\n                  prop: \"contactPhone\",\n                }, {\n                  // width: 200,\n                  label: '邮箱',\n                  prop: \"contactEmail\",\n                }, {\n                  // width: 200,\n                  label: '部门',\n                  prop: \"contactDept\",\n                }, {\n                  // width: 200,\n                  label: '职务',\n                  prop: \"contactJob\",\n                },\n                {\n                  // width: 200,\n                  label: '客户经理',\n                  prop: \"custManager\",\n                },\n                {\n                  label: \"所属机构\",\n                  prop: \"custOrg\",\n                  type: \"tree\",\n                  multiple: false,\n                  props: {\n                    label: \"title\",\n                  },\n                  slot: true,\n                  checkStrictly: true\n                }]\n            }\n          }\n\n\n        ]\n      }\n    }\n  },\n  methods: {\n    cancelDialog() {\n      this.$emit('cancel');\n    },\n    save(obj, done) {\n      console.log(obj)\n      var res = add(obj);\n      done();\n    },\n  }\n};\n",{"version":3,"sources":["addOrgCustomerDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAifile":"addOrgCustomerDialog.vue","sourceRoot":"src/views/contract/customer","sourcesContent":["<template>\r\n  <el-dialog\r\n    :title=\"title\"\r\n    :visible.sync=\"addOrEditDialog\"\r\n    :show-close=\"false\"\r\n    width=\"80%\" center\r\n  >\r\n    <avue-form v-model=\"obj\" :option=\"option\" @submit=\"save\" ></avue-form>\r\n\r\n    <span slot=\"footer\" style=\"text-align: center\" class=\"dialog-footer\">\r\n      <el-button @click=\"cancelDialog\">取 消</el-button>\r\n    </span>\r\n  </el-dialog>\r\n\r\n</template>\r\n\r\n<script>\r\n  import baseInfo from \"./eltabs/baseInfo\"\r\n  import {queryALl, add} from \"@/api/contract/customer/orgcustomer\";\r\n  import {getLazyTree} from \"@/api/base/region\";\r\n  import {getDeptTree} from \"@/api/system/dept\";\r\n\r\n  export default {\r\n    components: {\r\n      baseInfo,\r\n    },\r\n    mounted(){\r\n      // 初始化部门数据\r\n      getDeptTree('000000').then(res => {\r\n        console.log(this.option)\r\n        console.log(this.option.column.contactPerson)\r\n        const column = this.findObject(this.option.column.contactPerson, \"custOrg\");\r\n        console.log(column)\r\n        column.dicData = res.data.data;\r\n      });\r\n    },\r\n    name: \"add-org-customer-dialog\",\r\n    props: {\r\n      addOrEditDialog: {\r\n        type: Boolean,\r\n        default: false\r\n      }\r\n    },\r\n    methods: {\r\n      cancelDialog() {\r\n        this.$emit('cancel');\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        title: \"编辑\",\r\n        superUnitDialog: false,\r\n        obj: {\r\n          dynamic: [{\r\n            input: 1,\r\n            select: 1,\r\n            radio: 1,\r\n          }, {\r\n            input: 2,\r\n            select: 2,\r\n            radio: 1,\r\n          }]\r\n        },\r\n        form: {\r\n          title: '客户基本信息',\r\n        },\r\n        option: {\r\n          submitText: '完成',\r\n          column: [{\r\n            label: \"\",\r\n            labelWidth: 50,\r\n            type: 'title',\r\n            prop: \"title\",\r\n            span: 24,\r\n            styles: {\r\n              fontSize: '24px'\r\n            }\r\n          },\r\n            {\r\n              label: '客户名称',\r\n              suffixIcon: 'el-icon-tickets',\r\n              prop: 'custName',\r\n              span: 8,\r\n              rules: [{\r\n                required: true,\r\n                message: \"请输入客户名称\",\r\n                trigger: \"blur\"\r\n              }]\r\n            },\r\n            {\r\n              label: \"客户类型\",\r\n              prop: \"custType\",\r\n              type: \"select\",\r\n              rules: [{\r\n                required: true,\r\n                message: \"请输入客户名称\",\r\n                trigger: \"blur\"\r\n              }],\r\n              dicUrl: this.getDicValue(this.CONSTANT.CUST_TYPE),\r\n              props: {\r\n                label: \"dictValue\",\r\n                value: \"dictKey\"\r\n              },\r\n              span: 8,\r\n              row: true\r\n            },\r\n            {\r\n              label: \"上级单位\",\r\n              prop: \"superUnit\",\r\n              click: ({value, column}) => {\r\n                this.$message.success('查看控制台')\r\n                console.log('点击事件', value, column)\r\n                this.superUnitDialog = true;\r\n              },\r\n              dicData: [{\r\n                label: '真',\r\n                value: 'true'\r\n              }, {\r\n                label: '假',\r\n                value: 'false'\r\n              }],\r\n              span: 8,\r\n            },\r\n            {\r\n              label: \"所属行业\",\r\n              prop: \"custIndustrys\",\r\n              type: \"cascader\",\r\n              checkStrictly: true,\r\n              props: {\r\n                label: 'name',\r\n                value: 'code'\r\n              },\r\n              lazy: true,\r\n              lazyLoad(node, resolve) {\r\n                console.log(node.value)\r\n                let stop_level = 2;\r\n                let level = node.level;\r\n                let data = node.data || {}\r\n                let code = data.code;\r\n                let list = [];\r\n                let callback = () => {\r\n                  resolve((list || []).map(ele => {\r\n                    return Object.assign(ele, {\r\n                      leaf: level >= stop_level\r\n                    })\r\n                  }));\r\n                }\r\n                if (level == 0) {\r\n                  queryALl().then(res => {\r\n                    list = res.data.data;\r\n                    callback()\r\n                  })\r\n                } else {\r\n\r\n                  queryALl(node.value).then(res => {\r\n                    list = res.data.data;\r\n                    callback()\r\n                  })\r\n                }\r\n              },\r\n              span: 8,\r\n              row: true\r\n            },\r\n            {\r\n              label: \"所属地域\",\r\n              prop: \"region\",\r\n              type: 'tree',\r\n              span: 8,\r\n              leafOnly: true,\r\n              viewDisplay: false,\r\n              props: {\r\n                label: 'title',\r\n                value: 'value'\r\n              },\r\n              lazy: true,\r\n              treeLoad: function (node, resolve) {\r\n                const parentCode = (node.level === 0) ? \"00\" : node.data.id;\r\n                getLazyTree(parentCode).then(res => {\r\n                  resolve(res.data.data.map(item => {\r\n                    return {\r\n                      ...item,\r\n                      leaf: !item.hasChildren\r\n                    }\r\n                  }))\r\n                });\r\n              },\r\n              rules: []\r\n            },\r\n            {\r\n              label: '详细地址',\r\n              prop: 'custAddress',\r\n              span: 8,\r\n              row: true\r\n            },\r\n            {\r\n              label: '邮政编码',\r\n              prop: 'postcode',\r\n              span: 8,\r\n            },\r\n            {\r\n              label: '公司电话',\r\n              prop: 'comPhone',\r\n              span: 8,\r\n              row: true\r\n            },\r\n            {\r\n              label: '公司传真',\r\n              prop: 'comFax',\r\n              span: 8,\r\n            },\r\n            {\r\n              label: '公司网址',\r\n              prop: 'comWebsite',\r\n              span: 8,\r\n              row: true\r\n            },\r\n            {\r\n              label: \"客户状态\",\r\n              prop: \"custState\",\r\n              type: \"select\",\r\n              dicUrl: this.getDicValue(this.CONSTANT.CUST_STATE),\r\n              props: {\r\n                label: \"dictValue\",\r\n                value: \"dictKey\"\r\n              },\r\n              span: 8,\r\n            },\r\n            {\r\n              label: \"业务机会状态\",\r\n              prop: \"businessChance\",\r\n              type: \"select\",\r\n              dicUrl: this.getDicValue(this.CONSTANT.BUSINESS_CHANCE),\r\n              props: {\r\n                label: \"dictValue\",\r\n                value: \"dictKey\"\r\n              },\r\n              span: 8,\r\n              row: true\r\n            },\r\n            {\r\n              label: '业务描述',\r\n              prop: 'businessDesc',\r\n              type: 'textarea',\r\n              minRows: 10,\r\n              maxlength: 200,\r\n              span: 16,\r\n              showWordLimit: true\r\n            },\r\n            {\r\n              label: '客户管理活动',\r\n              prop: 'orgActivities',\r\n              type: 'dynamic',\r\n              span: 16,\r\n              children: {\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n                rowAdd: (done) => {\r\n                  this.$message.success('新增回调');\r\n                  done({\r\n                    input: '默认值'\r\n                  });\r\n                },\r\n                rowDel: (row, done) => {\r\n                  this.$message.success('删除回调' + JSON.stringify(row));\r\n                  done();\r\n                },\r\n                column: [{\r\n                  label: \"活动类型\",\r\n                  prop: \"activityType\",\r\n                  type: \"select\",\r\n                  // rules: [{\r\n                  //   required: true,\r\n                  //   message: \"请输入客户名称\",\r\n                  //   trigger: \"blur\"\r\n                  // }],\r\n                  dicUrl: this.getDicValue(this.CONSTANT.ACTIVITY_TYPE),\r\n                  props: {\r\n                    label: \"dictValue\",\r\n                    value: \"dictKey\"\r\n                  },\r\n                  span: 8,\r\n                }, {\r\n                  label: \"用户名\",\r\n                  prop: \"activityContent\",\r\n                  // rules: [{\r\n                  //   required: true,\r\n                  //   message: \"请输入用户名\",\r\n                  //   trigger: \"blur\"\r\n                  // }]\r\n                }]\r\n              }\r\n            },\r\n            {\r\n              label: '联系人信息',\r\n              prop: 'orgContacts',\r\n              type: 'dynamic',\r\n              span: 16,\r\n              children: {\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n                rowAdd: (done) => {\r\n                  this.$message.success('新增回调');\r\n                  done({\r\n                    input: '默认值'\r\n                  });\r\n                },\r\n                rowDel: (row, done) => {\r\n                  this.$message.success('删除回调' + JSON.stringify(row));\r\n                  done();\r\n                },\r\n                column: [{\r\n                  // width: 200,\r\n                  label: '联系人名称',\r\n                  prop: \"contactPerson\",\r\n                },\r\n                  {\r\n                    // width: 200,\r\n                    label: '联系人类型',\r\n                    prop: \"contactType\",\r\n                  }, {\r\n                    // width: 200,\r\n                    label: '联系方式',\r\n                    prop: \"contactPhone\",\r\n                  }, {\r\n                    // width: 200,\r\n                    label: '邮箱',\r\n                    prop: \"contactEmail\",\r\n                  }, {\r\n                    // width: 200,\r\n                    label: '部门',\r\n                    prop: \"contactDept\",\r\n                  }, {\r\n                    // width: 200,\r\n                    label: '职务',\r\n                    prop: \"contactJob\",\r\n                  },\r\n                  {\r\n                    // width: 200,\r\n                    label: '客户经理',\r\n                    prop: \"custManager\",\r\n                  },\r\n                  {\r\n                    label: \"所属机构\",\r\n                    prop: \"custOrg\",\r\n                    type: \"tree\",\r\n                    multiple: false,\r\n                    props: {\r\n                      label: \"title\",\r\n                    },\r\n                    slot: true,\r\n                    checkStrictly: true\r\n                  }]\r\n              }\r\n            }\r\n\r\n\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    methods: {\r\n      cancelDialog() {\r\n        this.$emit('cancel');\r\n      },\r\n      save(obj, done) {\r\n        console.log(obj)\r\n        var res = add(obj);\r\n        done();\r\n      },\r\n    }\r\n  };\r\n</script>\r\n"]}]}