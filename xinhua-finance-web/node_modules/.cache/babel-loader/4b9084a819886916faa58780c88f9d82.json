{"remainingRequest":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\babel-loader\\lib\\index.js!F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\src\\views\\contract\\customer\\addOrgCustomerDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\src\\views\\contract\\customer\\addOrgCustomerDialog.vue","mtime":1618367977438},{"path":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\东方通\\source\\b_zwj\\xinhua-finance-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"F:/\\u4E1C\\u65B9\\u901A/source/b_zwj/xinhua-finance-web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport baseInfo from \"./eltabs/baseInfo\";\nimport { queryALl, add } from \"@/api/contract/customer/orgcustomer\";\nimport { getLazyTree } from \"@/api/base/region\";\nimport { getDeptTree } from \"@/api/system/dept\";\nexport default _defineProperty({\n  components: {\n    baseInfo: baseInfo\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // 初始化部门数据\n    getDeptTree('000000').then(function (res) {\n      console.log(_this.option);\n      console.log(_this.option.column.contactPerson);\n\n      var column = _this.findObject(_this.option.column.contactPerson, \"custOrg\");\n\n      console.log(column);\n      column.dicData = res.data.data;\n    });\n  },\n  name: \"add-org-customer-dialog\",\n  props: {\n    addOrEditDialog: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    cancelDialog: function cancelDialog() {\n      this.$emit('cancel');\n    }\n  },\n  data: function data() {\n    var _this2 = this;\n\n    return {\n      title: \"编辑\",\n      superUnitDialog: false,\n      obj: {\n        dynamic: [{\n          input: 1,\n          select: 1,\n          radio: 1\n        }, {\n          input: 2,\n          select: 2,\n          radio: 1\n        }]\n      },\n      form: {\n        title: '客户基本信息'\n      },\n      option: {\n        submitText: '完成',\n        column: [{\n          label: \"\",\n          labelWidth: 50,\n          type: 'title',\n          prop: \"title\",\n          span: 24,\n          styles: {\n            fontSize: '24px'\n          }\n        }, {\n          label: '客户名称',\n          suffixIcon: 'el-icon-tickets',\n          prop: 'custName',\n          span: 8,\n          rules: [{\n            required: true,\n            message: \"请输入客户名称\",\n            trigger: \"blur\"\n          }]\n        }, {\n          label: \"客户类型\",\n          prop: \"custType\",\n          type: \"select\",\n          rules: [{\n            required: true,\n            message: \"请输入客户名称\",\n            trigger: \"blur\"\n          }],\n          dicUrl: this.getDicValue(this.CONSTANT.CUST_TYPE),\n          props: {\n            label: \"dictValue\",\n            value: \"dictKey\"\n          },\n          span: 8,\n          row: true\n        }, {\n          label: \"上级单位\",\n          prop: \"superUnit\",\n          click: function click(_ref) {\n            var value = _ref.value,\n                column = _ref.column;\n\n            _this2.$message.success('查看控制台');\n\n            console.log('点击事件', value, column);\n            _this2.superUnitDialog = true;\n          },\n          dicData: [{\n            label: '真',\n            value: 'true'\n          }, {\n            label: '假',\n            value: 'false'\n          }],\n          span: 8\n        }, {\n          label: \"所属行业\",\n          prop: \"custIndustrys\",\n          type: \"cascader\",\n          checkStrictly: true,\n          props: {\n            label: 'name',\n            value: 'code'\n          },\n          lazy: true,\n          lazyLoad: function lazyLoad(node, resolve) {\n            console.log(node.value);\n            var stop_level = 2;\n            var level = node.level;\n            var data = node.data || {};\n            var code = data.code;\n            var list = [];\n\n            var callback = function callback() {\n              resolve((list || []).map(function (ele) {\n                return Object.assign(ele, {\n                  leaf: level >= stop_level\n                });\n              }));\n            };\n\n            if (level == 0) {\n              queryALl().then(function (res) {\n                list = res.data.data;\n                callback();\n              });\n            } else {\n              queryALl(node.value).then(function (res) {\n                list = res.data.data;\n                callback();\n              });\n            }\n          },\n          span: 8,\n          row: true\n        }, {\n          label: \"所属地域\",\n          prop: \"region\",\n          type: 'tree',\n          span: 8,\n          leafOnly: true,\n          viewDisplay: false,\n          props: {\n            label: 'title',\n            value: 'value'\n          },\n          lazy: true,\n          treeLoad: function treeLoad(node, resolve) {\n            var parentCode = node.level === 0 ? \"00\" : node.data.id;\n            getLazyTree(parentCode).then(function (res) {\n              resolve(res.data.data.map(function (item) {\n                return _objectSpread(_objectSpread({}, item), {}, {\n                  leaf: !item.hasChildren\n                });\n              }));\n            });\n          },\n          rules: []\n        }, {\n          label: '详细地址',\n          prop: 'custAddress',\n          span: 8,\n          row: true\n        }, {\n          label: '邮政编码',\n          prop: 'postcode',\n          span: 8\n        }, {\n          label: '公司电话',\n          prop: 'comPhone',\n          span: 8,\n          row: true\n        }, {\n          label: '公司传真',\n          prop: 'comFax',\n          span: 8\n        }, {\n          label: '公司网址',\n          prop: 'comWebsite',\n          span: 8,\n          row: true\n        }, {\n          label: \"客户状态\",\n          prop: \"custState\",\n          type: \"select\",\n          dicUrl: this.getDicValue(this.CONSTANT.CUST_STATE),\n          props: {\n            label: \"dictValue\",\n            value: \"dictKey\"\n          },\n          span: 8\n        }, {\n          label: \"业务机会状态\",\n          prop: \"businessChance\",\n          type: \"select\",\n          dicUrl: this.getDicValue(this.CONSTANT.BUSINESS_CHANCE),\n          props: {\n            label: \"dictValue\",\n            value: \"dictKey\"\n          },\n          span: 8,\n          row: true\n        }, {\n          label: '业务描述',\n          prop: 'businessDesc',\n          type: 'textarea',\n          minRows: 10,\n          maxlength: 200,\n          span: 16,\n          showWordLimit: true\n        }, {\n          label: '客户管理活动',\n          prop: 'orgActivities',\n          type: 'dynamic',\n          span: 16,\n          children: {\n            align: 'center',\n            headerAlign: 'center',\n            rowAdd: function rowAdd(done) {\n              _this2.$message.success('新增回调');\n\n              done({\n                input: '默认值'\n              });\n            },\n            rowDel: function rowDel(row, done) {\n              _this2.$message.success('删除回调' + JSON.stringify(row));\n\n              done();\n            },\n            column: [{\n              label: \"活动类型\",\n              prop: \"activityType\",\n              type: \"select\",\n              // rules: [{\n              //   required: true,\n              //   message: \"请输入客户名称\",\n              //   trigger: \"blur\"\n              // }],\n              dicUrl: this.getDicValue(this.CONSTANT.ACTIVITY_TYPE),\n              props: {\n                label: \"dictValue\",\n                value: \"dictKey\"\n              },\n              span: 8\n            }, {\n              label: \"用户名\",\n              prop: \"activityContent\" // rules: [{\n              //   required: true,\n              //   message: \"请输入用户名\",\n              //   trigger: \"blur\"\n              // }]\n\n            }]\n          }\n        }, {\n          label: '联系人信息',\n          prop: 'orgContacts',\n          type: 'dynamic',\n          span: 16,\n          children: {\n            align: 'center',\n            headerAlign: 'center',\n            rowAdd: function rowAdd(done) {\n              _this2.$message.success('新增回调');\n\n              done({\n                input: '默认值'\n              });\n            },\n            rowDel: function rowDel(row, done) {\n              _this2.$message.success('删除回调' + JSON.stringify(row));\n\n              done();\n            },\n            column: [{\n              // width: 200,\n              label: '联系人名称',\n              prop: \"contactPerson\"\n            }, {\n              // width: 200,\n              label: '联系人类型',\n              prop: \"contactType\"\n            }, {\n              // width: 200,\n              label: '联系方式',\n              prop: \"contactPhone\"\n            }, {\n              // width: 200,\n              label: '邮箱',\n              prop: \"contactEmail\"\n            }, {\n              // width: 200,\n              label: '部门',\n              prop: \"contactDept\"\n            }, {\n              // width: 200,\n              label: '职务',\n              prop: \"contactJob\"\n            }, {\n              // width: 200,\n              label: '客户经理',\n              prop: \"custManager\"\n            }, {\n              label: \"所属机构\",\n              prop: \"custOrg\",\n              type: \"tree\",\n              multiple: false,\n              props: {\n                label: \"title\"\n              },\n              slot: true,\n              checkStrictly: true\n            }]\n          }\n        }]\n      }\n    };\n  }\n}, \"methods\", {\n  cancelDialog: function cancelDialog() {\n    this.$emit('cancel');\n  },\n  save: function save(obj, done) {\n    console.log(obj);\n    var res = add(obj);\n    done();\n  }\n});",{"version":3,"sources":["addOrgCustomerDialog.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <el-dialog\r\n    :title=\"title\"\r\n    :visible.sync=\"addOrEditDialog\"\r\n    :show-close=\"false\"\r\n    width=\"80%\" center\r\n  >\r\n    <avue-form v-model=\"obj\" :option=\"option\" @submit=\"save\" ></avue-form>\r\n\r\n    <span slot=\"footer\" style=\"text-align: center\" class=\"dialog-footer\">\r\n      <el-button @click=\"cancelDialog\">取 消</el-button>\r\n    </span>\r\n  </el-dialog>\r\n\r\n</template>\r\n\r\n<script>\r\n  import baseInfo from \"./eltabs/baseInfo\"\r\n  import {queryALl, add} from \"@/api/contract/customer/orgcustomer\";\r\n  import {getLazyTree} from \"@/api/base/region\";\r\n  import {getDeptTree} from \"@/api/system/dept\";\r\n\r\n  export default {\r\n    components: {\r\n      baseInfo,\r\n    },\r\n    mounted(){\r\n      // 初始化部门数据\r\n      getDeptTree('000000').then(res => {\r\n        console.log(this.option)\r\n        console.log(this.option.column.contactPerson)\r\n        const column = this.findObject(this.option.column.contactPerson, \"custOrg\");\r\n        console.log(column)\r\n        column.dicData = res.data.data;\r\n      });\r\n    },\r\n    name: \"add-org-customer-dialog\",\r\n    props: {\r\n      addOrEditDialog: {\r\n        type: Boolean,\r\n        default: false\r\n      }\r\n    },\r\n    methods: {\r\n      cancelDialog() {\r\n        this.$emit('cancel');\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        title: \"编辑\",\r\n        superUnitDialog: false,\r\n        obj: {\r\n          dynamic: [{\r\n            input: 1,\r\n            select: 1,\r\n            radio: 1,\r\n          }, {\r\n            input: 2,\r\n            select: 2,\r\n            radio: 1,\r\n          }]\r\n        },\r\n        form: {\r\n          title: '客户基本信息',\r\n        },\r\n        option: {\r\n          submitText: '完成',\r\n          column: [{\r\n            label: \"\",\r\n            labelWidth: 50,\r\n            type: 'title',\r\n            prop: \"title\",\r\n            span: 24,\r\n            styles: {\r\n              fontSize: '24px'\r\n            }\r\n          },\r\n            {\r\n              label: '客户名称',\r\n              suffixIcon: 'el-icon-tickets',\r\n              prop: 'custName',\r\n              span: 8,\r\n              rules: [{\r\n                required: true,\r\n                message: \"请输入客户名称\",\r\n                trigger: \"blur\"\r\n              }]\r\n            },\r\n            {\r\n              label: \"客户类型\",\r\n              prop: \"custType\",\r\n              type: \"select\",\r\n              rules: [{\r\n                required: true,\r\n                message: \"请输入客户名称\",\r\n                trigger: \"blur\"\r\n              }],\r\n              dicUrl: this.getDicValue(this.CONSTANT.CUST_TYPE),\r\n              props: {\r\n                label: \"dictValue\",\r\n                value: \"dictKey\"\r\n              },\r\n              span: 8,\r\n              row: true\r\n            },\r\n            {\r\n              label: \"上级单位\",\r\n              prop: \"superUnit\",\r\n              click: ({value, column}) => {\r\n                this.$message.success('查看控制台')\r\n                console.log('点击事件', value, column)\r\n                this.superUnitDialog = true;\r\n              },\r\n              dicData: [{\r\n                label: '真',\r\n                value: 'true'\r\n              }, {\r\n                label: '假',\r\n                value: 'false'\r\n              }],\r\n              span: 8,\r\n            },\r\n            {\r\n              label: \"所属行业\",\r\n              prop: \"custIndustrys\",\r\n              type: \"cascader\",\r\n              checkStrictly: true,\r\n              props: {\r\n                label: 'name',\r\n                value: 'code'\r\n              },\r\n              lazy: true,\r\n              lazyLoad(node, resolve) {\r\n                console.log(node.value)\r\n                let stop_level = 2;\r\n                let level = node.level;\r\n                let data = node.data || {}\r\n                let code = data.code;\r\n                let list = [];\r\n                let callback = () => {\r\n                  resolve((list || []).map(ele => {\r\n                    return Object.assign(ele, {\r\n                      leaf: level >= stop_level\r\n                    })\r\n                  }));\r\n                }\r\n                if (level == 0) {\r\n                  queryALl().then(res => {\r\n                    list = res.data.data;\r\n                    callback()\r\n                  })\r\n                } else {\r\n\r\n                  queryALl(node.value).then(res => {\r\n                    list = res.data.data;\r\n                    callback()\r\n                  })\r\n                }\r\n              },\r\n              span: 8,\r\n              row: true\r\n            },\r\n            {\r\n              label: \"所属地域\",\r\n              prop: \"region\",\r\n              type: 'tree',\r\n              span: 8,\r\n              leafOnly: true,\r\n              viewDisplay: false,\r\n              props: {\r\n                label: 'title',\r\n                value: 'value'\r\n              },\r\n              lazy: true,\r\n              treeLoad: function (node, resolve) {\r\n                const parentCode = (node.level === 0) ? \"00\" : node.data.id;\r\n                getLazyTree(parentCode).then(res => {\r\n                  resolve(res.data.data.map(item => {\r\n                    return {\r\n                      ...item,\r\n                      leaf: !item.hasChildren\r\n                    }\r\n                  }))\r\n                });\r\n              },\r\n              rules: []\r\n            },\r\n            {\r\n              label: '详细地址',\r\n              prop: 'custAddress',\r\n              span: 8,\r\n              row: true\r\n            },\r\n            {\r\n              label: '邮政编码',\r\n              prop: 'postcode',\r\n              span: 8,\r\n            },\r\n            {\r\n              label: '公司电话',\r\n              prop: 'comPhone',\r\n              span: 8,\r\n              row: true\r\n            },\r\n            {\r\n              label: '公司传真',\r\n              prop: 'comFax',\r\n              span: 8,\r\n            },\r\n            {\r\n              label: '公司网址',\r\n              prop: 'comWebsite',\r\n              span: 8,\r\n              row: true\r\n            },\r\n            {\r\n              label: \"客户状态\",\r\n              prop: \"custState\",\r\n              type: \"select\",\r\n              dicUrl: this.getDicValue(this.CONSTANT.CUST_STATE),\r\n              props: {\r\n                label: \"dictValue\",\r\n                value: \"dictKey\"\r\n              },\r\n              span: 8,\r\n            },\r\n            {\r\n              label: \"业务机会状态\",\r\n              prop: \"businessChance\",\r\n              type: \"select\",\r\n              dicUrl: this.getDicValue(this.CONSTANT.BUSINESS_CHANCE),\r\n              props: {\r\n                label: \"dictValue\",\r\n                value: \"dictKey\"\r\n              },\r\n              span: 8,\r\n              row: true\r\n            },\r\n            {\r\n              label: '业务描述',\r\n              prop: 'businessDesc',\r\n              type: 'textarea',\r\n              minRows: 10,\r\n              maxlength: 200,\r\n              span: 16,\r\n              showWordLimit: true\r\n            },\r\n            {\r\n              label: '客户管理活动',\r\n              prop: 'orgActivities',\r\n              type: 'dynamic',\r\n              span: 16,\r\n              children: {\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n                rowAdd: (done) => {\r\n                  this.$message.success('新增回调');\r\n                  done({\r\n                    input: '默认值'\r\n                  });\r\n                },\r\n                rowDel: (row, done) => {\r\n                  this.$message.success('删除回调' + JSON.stringify(row));\r\n                  done();\r\n                },\r\n                column: [{\r\n                  label: \"活动类型\",\r\n                  prop: \"activityType\",\r\n                  type: \"select\",\r\n                  // rules: [{\r\n                  //   required: true,\r\n                  //   message: \"请输入客户名称\",\r\n                  //   trigger: \"blur\"\r\n                  // }],\r\n                  dicUrl: this.getDicValue(this.CONSTANT.ACTIVITY_TYPE),\r\n                  props: {\r\n                    label: \"dictValue\",\r\n                    value: \"dictKey\"\r\n                  },\r\n                  span: 8,\r\n                }, {\r\n                  label: \"用户名\",\r\n                  prop: \"activityContent\",\r\n                  // rules: [{\r\n                  //   required: true,\r\n                  //   message: \"请输入用户名\",\r\n                  //   trigger: \"blur\"\r\n                  // }]\r\n                }]\r\n              }\r\n            },\r\n            {\r\n              label: '联系人信息',\r\n              prop: 'orgContacts',\r\n              type: 'dynamic',\r\n              span: 16,\r\n              children: {\r\n                align: 'center',\r\n                headerAlign: 'center',\r\n                rowAdd: (done) => {\r\n                  this.$message.success('新增回调');\r\n                  done({\r\n                    input: '默认值'\r\n                  });\r\n                },\r\n                rowDel: (row, done) => {\r\n                  this.$message.success('删除回调' + JSON.stringify(row));\r\n                  done();\r\n                },\r\n                column: [{\r\n                  // width: 200,\r\n                  label: '联系人名称',\r\n                  prop: \"contactPerson\",\r\n                },\r\n                  {\r\n                    // width: 200,\r\n                    label: '联系人类型',\r\n                    prop: \"contactType\",\r\n                  }, {\r\n                    // width: 200,\r\n                    label: '联系方式',\r\n                    prop: \"contactPhone\",\r\n                  }, {\r\n                    // width: 200,\r\n                    label: '邮箱',\r\n                    prop: \"contactEmail\",\r\n                  }, {\r\n                    // width: 200,\r\n                    label: '部门',\r\n                    prop: \"contactDept\",\r\n                  }, {\r\n                    // width: 200,\r\n                    label: '职务',\r\n                    prop: \"contactJob\",\r\n                  },\r\n                  {\r\n                    // width: 200,\r\n                    label: '客户经理',\r\n                    prop: \"custManager\",\r\n                  },\r\n                  {\r\n                    label: \"所属机构\",\r\n                    prop: \"custOrg\",\r\n                    type: \"tree\",\r\n                    multiple: false,\r\n                    props: {\r\n                      label: \"title\",\r\n                    },\r\n                    slot: true,\r\n                    checkStrictly: true\r\n                  }]\r\n              }\r\n            }\r\n\r\n\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    methods: {\r\n      cancelDialog() {\r\n        this.$emit('cancel');\r\n      },\r\n      save(obj, done) {\r\n        console.log(obj)\r\n        var res = add(obj);\r\n        done();\r\n      },\r\n    }\r\n  };\r\n</script>\r\n"],"sourceRoot":"src/views/contract/customer"}]}